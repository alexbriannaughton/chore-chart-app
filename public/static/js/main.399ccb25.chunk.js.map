{"version":3,"sources":["NavBar.js","components/LoginForm.js","components/SignUpForm.js","Homepage.js","CreatePage.js","AllChartsPage.js","components/Circle.js","ChartPage.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","user","setUser","handleLogout","fetch","method","then","r","ok","id","className","to","exact","onClick","LoginForm","navigate","useNavigate","useState","username","setUsername","password","setPassword","errors","setErrors","isLoading","setIsLoading","onSubmit","e","preventDefault","headers","body","JSON","stringify","json","err","type","value","onChange","target","map","SignUpForm","passwordConfirmation","setPasswordConfirmation","password_confirmation","Homepage","showLogin","setShowLogin","CreatePage","chartName","setChartName","nameValue","emailValue","membersArr","setMembersArr","tasksArr","setTasksArr","handleMembersChange","index","s","newArr","slice","handleEmailsChange","handleTasksChange","member","task","name","user_id","chartResp","newChart","Promise","all","email","chore_wheel_id","memberResps","newMembers","taskResps","newTasks","member_id","task_id","mtResps","mt","newMTs","console","log","item","i","size","updated","filter","removeMemberInput","removeTaskInput","AllChartsPage","chore_wheels","cw","Circle","memberTasks","setMemberTasks","rotate","setRotate","params","useParams","datas","color","Math","floor","random","toString","chartId","res","data","style","height","label","dataEntry","labelStyle","fill","fontSize","fontFamily","radius","labelPosition","ChartPage","useEffect","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.399ccb25.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\"\n\nfunction NavBar({ user, setUser }) {\n\n    function handleLogout() {\n        if (user) {\n            fetch(\"/logout\", { method: \"DELETE\" }).then((r) => {\n                if (r.ok) {\n                    setUser(null)\n                }\n            })\n        }\n    }\n\n    function noUser() {\n        return (\n            <>\n            <NavLink\n            className=\"nav-buttons\"\n            to=\"/\"\n            >\n                <span>Login</span>\n            </NavLink>\n\n            </>\n        )\n    }\n\n    function withUser() {\n        return (\n            <>\n                <NavLink\n                    className=\"nav-buttons\"\n                    to=\"create-new-chart\"\n                >\n                    <span>Create New Chart</span>\n                </NavLink>\n\n                <NavLink\n                    className=\"nav-buttons\"\n                    to=\"your-charts\"\n                >\n                    <span>Your Charts</span>\n                </NavLink>\n\n                <NavLink\n                    className=\"nav-buttons\"\n                    exact to=\"/\"\n                    onClick={handleLogout}\n                >\n                    <span>Logout</span>\n                </NavLink>\n\n            </>\n        )\n    }\n    \n    return (\n        <nav id=\"navbar\">\n\n            {user ? withUser() : noUser()}\n\n        </nav>\n    )\n}\n\nexport default NavBar","import { useNavigate } from \"react-router-dom\"\nimport { useState } from \"react\"\n\nfunction LoginForm( {setUser} ) {\n    const navigate = useNavigate()\n\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [errors, setErrors] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n    function handleLoginSubmit(e) {\n        e.preventDefault()\n        setIsLoading(true)\n        fetch(\"/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ username, password }),\n        }).then((r) => {\n            setIsLoading(false)\n            if (r.ok) {\n                r.json().then((user) => setUser(user))\n                navigate(\"/\")\n            } else {\n                r.json().then((err) => setErrors(err.errors))\n            }\n        })\n    } \n\n    return (\n        <div>\n            <form onSubmit={handleLoginSubmit}>\n                <div>\n                    <label>\n                        Username:\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <label>\n                        Password:\n                    </label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n                <button type=\"submit\">\n                    {isLoading ? \"Loading...\" : \"Login\"}\n                </button>\n                {errors.map((err) => (\n                    <p key={err}>{err}</p>\n                ))}\n            </form>\n        </div>\n    )\n}\n\nexport default LoginForm","import { useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\n\nfunction SignUpForm({ setUser }) {\n\n    const navigate = useNavigate()\n\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [passwordConfirmation, setPasswordConfirmation] = useState(\"\")\n    const [errors, setErrors] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n    function handleSignUpSubmit(e) {\n        e.preventDefault()\n        setIsLoading(true)\n        setErrors([])\n        fetch(\"/signup\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                username,\n                password,\n                password_confirmation: passwordConfirmation\n            }),\n        }).then((r) => {\n            setIsLoading(false)\n            if (r.ok) {\n                r.json().then((user) => setUser(user))\n                navigate(\"/\")\n            } else {\n                r.json().then((err) => setErrors(err.errors))\n            }\n        })\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSignUpSubmit}>\n                <div>\n                    <label>\n                        Username:\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <label>\n                        Password:\n                    </label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <label>\n                        Password confirmation:\n                    </label>\n                    <input\n                        type=\"password\"\n                        value={passwordConfirmation}\n                        onChange={(e) => setPasswordConfirmation(e.target.value)}\n                    />\n                </div>\n                <button type=\"submit\">\n                    {isLoading ? \"Loading\" : \"Sign Up!\"}\n                </button>\n                {errors.map((err) => (\n                    <p key={err}>{err}</p>\n                ))}\n            </form>\n        </div>\n    )\n}\n\nexport default SignUpForm","import { useState } from \"react\"\nimport LoginForm from \"./components/LoginForm\"\nimport SignUpForm from \"./components/SignUpForm\"\n\nfunction Homepage({ setUser, user }) {\n\n    const [showLogin, setShowLogin] = useState(true)\n\n    function loginStuff() {\n        return (\n            <>\n                {showLogin ? (\n                    <div>\n                        <LoginForm\n                            setUser={setUser}\n                        />\n                        <div>\n                            <p>don't have an account?</p>\n                            <button onClick={e => setShowLogin(false)}>\n                                sign up!\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div>\n                            <SignUpForm setUser={setUser} />\n                            <p>already have an account?</p>\n                            <button onClick={e => setShowLogin(true)}>\n                                log in!\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </>\n        )\n    }\n\n    function userHome() {\n        // if (user) {\n            return (\n                <div>\n                    <h1>\n                        Welcome, {user.username}!\n                    </h1>\n                </div>\n            )\n        // }\n    }\n\n    return (\n        <>\n            {user ? userHome() : loginStuff() }\n        </>\n    )\n}\n\nexport default Homepage","import { useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction CreatePage({ user }) {\n\n    const navigate = useNavigate()\n\n    const [errors, setErrors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false)\n\n    const [chartName, setChartName] = useState(\"\")\n\n    const memberInputArr = [\n        {\n            nameValue: \"\",\n            emailValue: \"\"\n        }\n    ]\n\n    const taskInputArr = [\n        {\n            value: \"\"\n        }\n    ]\n\n    const [membersArr, setMembersArr] = useState(memberInputArr)\n    const [tasksArr, setTasksArr] = useState(taskInputArr)\n\n    function addMembersInput(e) {\n        setMembersArr(s => {\n            return [\n                ...s,\n                {\n                    nameValue: \"\",\n                    emailValue: \"\"\n                }\n            ]\n        })\n    }\n\n    function addTasksInput(e) {\n        setTasksArr(s => {\n            return [\n                ...s,\n                {\n                    value: \"\"\n                }\n            ]\n        })\n    }\n\n    function removeMemberInput(i) {\n        const updated =\n            membersArr.filter((task, index) => index !== i)\n        setMembersArr(updated)\n    }\n\n    function removeTaskInput(i) {\n        const updated =\n            tasksArr.filter((task, index) => index !== i)\n        setTasksArr(updated)\n    }\n\n    function handleMembersChange(e) {\n        e.preventDefault()\n\n        const index = e.target.id\n        setMembersArr(s => {\n            const newArr = s.slice()\n            newArr[index].nameValue = e.target.value\n\n            return newArr\n        })\n    }\n\n    function handleEmailsChange(e) {\n        e.preventDefault()\n\n        const index = e.target.id\n        setMembersArr(s => {\n            const newArr = s.slice()\n            newArr[index].emailValue = e.target.value\n\n            return newArr\n        })\n    }\n\n    function handleTasksChange(e) {\n        e.preventDefault()\n\n        const index = e.target.id\n        setTasksArr(s => {\n            const newArr = s.slice()\n            newArr[index].value = e.target.value\n\n            return newArr\n        })\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n        setIsLoading(true)\n\n        try {\n            //no blank fields catcher\n            membersArr.map((member) => {\n                if (member.value === \"\") {\n                    throw ['no blank fields may be submitted']\n                }\n            })\n            tasksArr.map((task) => {\n                if (task.value === \"\") {\n                    throw ['no blank fields may be submitted']\n                }\n            })\n\n            //create chore wheel\n            const chartResp =\n                await fetch(\"/chore_wheels\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        name: chartName,\n                        user_id: user.id\n                    })\n                })\n            const newChart = await chartResp.json()\n            if (!chartResp.ok) {\n                throw newChart.errors\n            }\n\n            //create members\n            const memberResps =\n                await Promise.all(\n                    membersArr.map((member) => {\n                        return fetch(\"/members\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({\n                                name: member.nameValue,\n                                email: member.emailValue,\n                                chore_wheel_id: newChart.id\n                            })\n                        })\n                    })\n                )\n            const newMembers =\n                await Promise.all(\n                    memberResps.map((member) => {\n                        return member.json()\n                    })\n                )\n            // console.log(newMembers)\n\n            //create tasks\n            const taskResps =\n                await Promise.all(\n                    tasksArr.map((task) => {\n                        return fetch(\"/tasks\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({\n                                name: task.value,\n                                chore_wheel_id: newChart.id\n                            })\n                        })\n                    })\n                )\n            const newTasks =\n                await Promise.all(\n                    taskResps.map((task) => {\n                        return task.json()\n                    })\n                )\n            // console.log(newTasks)\n\n            //create membertask for every member\n            const mtResps =\n                await Promise.all(\n                    newMembers.map((member, index) => {\n                        return fetch(\"/member_tasks\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({\n                                member_id: member.id,\n                                task_id: newTasks[index].id,\n                                chore_wheel_id: newChart.id\n                            })\n                        })\n                    })\n                )\n            const newMTs =\n                await Promise.all(\n                    mtResps.map((mt) => {\n                        return mt.json()\n                    })\n                )\n            console.log(newMTs)\n            navigate(`/your-charts/${newChart.id}`)\n        } catch (error) {\n            console.log(error)\n        }\n        setIsLoading(false)\n    }\n\n    return (\n        <div id=\"form-div\">\n            <h1>create new chart</h1>\n            <div id=\"chart-name\">\n                <form onSubmit={handleSubmit}>\n                    <div>\n                        <label>\n                            Chart name:\n                        </label>\n                        <input\n                            type=\"text\"\n                            value={chartName}\n                            onChange={(e) => setChartName(e.target.value)}\n                        /><br />\n                    </div>\n                    <div>\n\n                        {/* members form */}\n\n                        {membersArr.map((item, i) => {\n                            return (\n                                <div id=\"members-div\">\n                                    <label>\n                                        Member name:\n                                    </label>\n                                    <input\n                                        onChange={handleMembersChange}\n                                        value={item.nameValue}\n                                        id={i}\n                                        type={item.type}\n                                        size=\"40\"\n                                    />\n                                    <label>\n                                        & Member email:\n                                    </label>\n                                    <input\n                                        onChange={handleEmailsChange}\n                                        value={item.emailValue}\n                                        id={i}\n                                        type={item.type}\n                                        size=\"40\"\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        onClick={(e) => removeMemberInput(i)}\n                                    >\n                                        x\n                                    </button>\n                                </div>\n                            );\n                        })}\n                        <button type=\"button\" onClick={addMembersInput}>Add another member</button>\n\n                        <br />\n\n                        {/* tasks form */}\n                        {tasksArr.map((item, i) => {\n                            return (\n                                <div id=\"tasks-div\">\n                                    <label>\n                                        Task name:\n                                    </label>\n                                    <input\n                                        onChange={handleTasksChange}\n                                        value={item.value}\n                                        id={i}\n                                        type={item.type}\n                                        size=\"40\"\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        onClick={(e) => removeTaskInput(i)}\n                                    >\n                                        x\n                                    </button>\n                                </div>\n                            );\n                        })}\n                        <button type=\"button\" onClick={addTasksInput}>Add another task</button>\n\n                        <br /><br />\n\n                    </div>\n\n\n                    <button type=\"submit\">\n                        {isLoading ? \"Loading...\" : \"Submit\"}\n                    </button>\n                    <br />\n                    {errors.map((err) => (\n                        <p key={err}>{err}</p>\n                    ))}\n                </form>\n            </div>\n\n\n        </div >\n    )\n}\n\nexport default CreatePage","import { Link } from \"react-router-dom\"\n\n\nfunction AllChartsPage({ user }) {\n\n    function renderAllCharts() {\n        return (\n            user && user.chore_wheels.map((cw) => {\n                return (\n                    <div>\n                        <Link\n                            key={cw.id}\n                            to={`${cw.id}`}\n                        >\n                            {cw.name}\n                        </Link>\n                    </div>\n                )\n            })\n        )\n    }\n\n    return (\n        <div>\n            {renderAllCharts()}\n        </div>\n    )\n}\n\nexport default AllChartsPage","import { PieChart } from \"react-minimal-pie-chart\"\nimport { useParams } from 'react-router-dom'\nimport { useState } from \"react\"\n\n\nfunction Circle({ memberTasks, setMemberTasks }) {\n\n    const [rotate, setRotate] = useState(false)\n\n    const params = useParams()\n\n    function randomColor() {\n        return Math.floor(Math.random() * 16777215).toString(16);\n    }\n    const datas = memberTasks.map((mt) => {\n        return {\n            member: mt.member.name,\n            task: mt.task.name,\n            value: 1,\n            color: `#${randomColor()}`\n        }\n    })\n\n    async function rotateTasks() {\n        setRotate(true)\n        await fetch(`/rotate/${params.chartId}`)\n        await fetch(`/chore_wheels/${params.chartId}`)\n            .then((res) => res.json())\n            .then((data) => {\n                setMemberTasks(data)\n                setRotate(false)\n            })\n    }\n\n    return (\n        <div>\n            <div id=\"circle-div\">\n                <div id=\"bottom-circle\">\n                    <PieChart\n                        data={datas}\n                        style={{ height: '500px' }}\n                        label={({ dataEntry }) => dataEntry.member}\n                        labelStyle={(index) => ({\n                            fill: 'black',\n                            fontSize: '5px',\n                            fontFamily: 'sans-serif',\n                        })}\n                        radius={42}\n                        labelPosition={112}\n                    />\n                </div>\n                <div id=\"top-circle\">\n                    <PieChart\n                        className={rotate ? \"spin\" : null}\n                        data={datas}\n                        style={{ height: '410px' }}\n                        label={({ dataEntry }) => dataEntry.task}\n                        labelStyle={(index) => ({\n                            fill: 'black',\n                            fontSize: '5px',\n                            fontFamily: 'sans-serif',\n                        })}\n                    />\n                </div>\n\n            </div>\n            <button onClick={rotateTasks}>rotate tasks</button>\n        </div>\n    )\n}\n\nexport default Circle","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Circle from './components/Circle'\n\nfunction ChartPage() {\n\n    const [memberTasks, setMemberTasks] = useState([])\n\n    const params = useParams()\n\n    useEffect(() => {\n        fetch(`/chore_wheels/${params.chartId}`)\n            .then((res) => res.json())\n            .then((data) => setMemberTasks(data))\n    }, [])\n\n    function renderMemberTasks() {\n        return (\n            memberTasks && memberTasks.map((mt) => {\n                return (\n                    <div>\n                        <p>\n                            {mt.member.name}: {mt.task.name}\n                        </p>\n                    </div>\n                )\n            })\n        )\n    }\n\n    return (\n        <div>\n            {renderMemberTasks()}\n            <Circle\n                memberTasks={memberTasks}\n                setMemberTasks={setMemberTasks}\n            />\n            \n        </div>\n    )\n}\n\nexport default ChartPage","import { Route, Routes } from \"react-router-dom\"\nimport { useState, useEffect } from 'react';\nimport NavBar from './NavBar';\nimport Homepage from './Homepage';\nimport CreatePage from './CreatePage'\nimport AllChartsPage from './AllChartsPage';\nimport ChartPage from \"./ChartPage\";\n\nfunction App() {\n\n  const [user, setUser] = useState(null)\n\n  console.log(user)\n\n  useEffect(() => {\n    // auto-login\n    fetch(\"/me\").then((r) => {\n      if (r.ok) {\n        r.json().then((user) => setUser(user));\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <NavBar\n        user={user}\n        setUser={setUser}\n      />\n\n      <Routes>\n\n        <Route\n          path=\"/\"\n          element={<Homepage\n            user={user}\n            setUser={setUser}\n          />}\n        />\n\n        <Route\n          path=\"/create-new-chart\"\n          element={<CreatePage user={user}/>}\n        />\n\n        <Route\n          path=\"/your-charts\"\n          element={<AllChartsPage user={user}/>}\n        />\n\n        <Route\n          path={`/your-charts/:chartId`}\n          element={<ChartPage/>}\n        />\n\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}